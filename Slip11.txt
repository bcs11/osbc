#include<stdio.h>

struct node
{
  int pno,freq;
}frames[20];
int n;

int page_found(int pno)
{
  int fno;
  for(fno=0;fno<n;fno++)
	if(frames[fno].pno==pno)
	   return fno;
	return -1;
}

int get_free_frame()
{  int fno;
  for (fno=0; fno<=n; fno++)
	if (frames[fno].pno==-1)
		return(fno);
   return(-1);
}

int get_lfu_frame()
{
  int fno;
  int selfno=0;
  for (fno=1; fno<n; fno++)
	if(frames[fno].freq<frames[selfno].freq)
	selfno=fno;
  return selfno;
}
int main()
{
   int p_request[]={3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6 };
   int size=12;
   int page_falts=0,i,j,fno;
   
   printf("\nHow many frames:");  scanf("%d",&n);
   //initialize frames
   for (i=0; i<n; i++)
   { frames[i].pno=-1;
	 frames[i].freq=0;
   }

   printf("\nPageNo     Page Frames          	Page Fault");
   printf("\n---------------------------------------------------");
   for(i=0;i<size;i++)
   {
	 j=page_found(p_request[i]);
	 if(j==-1)  
	 {
	   j=get_free_frame();
	   if (j==-1)
		 j=get_lfu_frame();
	   page_falts++;
	   frames[j].pno=p_request[i];
	   frames[j].freq=1;
	   printf("\n%4d\t ",p_request[i]);
	   for (fno=0; fno<n; fno++)
		 printf("%4d:%2d",frames[fno].pno,frames[fno].freq);
	   printf(" : YES");
	 }
	else 
	{
	   printf("\n%4d\t ",p_request[i]);
	   frames[j].freq++;
	   for (fno=0; fno<n; fno++)
		 printf("%4d:%2d",frames[fno].pno,frames[fno].freq);
	   printf(" : NO");
	}
   }
  printf("\n-------------------------------------------------------");
  printf("\n Number of Page_Falts=%d",page_falts);
 }
############################################################################include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

char comm[100], *ptr;
char *args[10];
int tot_arg;

int list(char option, char dirname[]);

main()
{
    do
    {
        printf("myshell $ ");
        getcomm();
        sep_arg();
        take_action();
    } while (1);
}

sep_arg()
{
    int i, j;
    i = j = tot_arg = 0;

    args[tot_arg] = (char *)malloc(sizeof(char) * 20);
    for (i = 0; comm[i] != '\0'; i++)
    {
        if (comm[i] == ' ')
        {
            args[tot_arg][j] = '\0';
            tot_arg++;
            args[tot_arg] = (char *)malloc(sizeof(char) * 20);
            j = 0;
        }
        else
        {
            args[tot_arg][j] = comm[i];
            j++;
        }
    } 
    args[tot_arg][j] = '\0'; // complete last word
    return;
}

getcomm()
{
    int len;
    ptr = fgets(comm, 80, stdin);
    len = strlen(comm);
    comm[len - 1] = '\0';
    return;
} 
take_action()
{
    char str[100];
    pid_t pid;
    int status;

    if (strcmp(args[0], "list") == 0)
        list(*args[1], args[2]);
    else if (strcmp(args[0], "quit") == 0)
        exit(0);
} 
int list(char option, char dirname[])
{
    DIR *dp;
    struct dirent *dent;
    struct stat buff;
    char orgdir[100];
    int cnt, reply;
    getcwd(orgdir, 90);
    chdir(dirname);
    switch (option)
    {
    case 'f':
        dp = opendir(".");
        if (dp == NULL)
        {
            printf("\nUnable to open dir");
            exit(0);
        }
        dent = readdir(dp);
        while (dent != NULL)
        {
            printf("\n%s", dent->d_name);
            dent = readdir(dp);
        }
        printf("\n");
        break;
    case 'n': 
        cnt = 0;
        dp = opendir(".");
        if (dp == NULL)
        {
            printf("\nUnable to open dir");
            exit(0);
        }
        dent = readdir(dp);
        while (dent != NULL)
        {
            cnt++;
            dent = readdir(dp);
        }
        printf("\ntot dir entries = %d\n", cnt);
        closedir(dp);
        break;
    case 'i': 
        dp = opendir(".");
        if (dp == NULL)
        {
            printf("\nUnable to open dir");
            exit(0);
        }
        dent = readdir(dp);
        while (dent != NULL)
        {
            reply = stat(dent->d_name, &buff);
            if (reply < 0)
                printf("\nError");
            else
                printf("\n%s %ld", dent->d_name, buff.st_ino);
            dent = readdir(dp);
        }
        closedir(dp);
        break;
    default:
        printf("\nInvalid option");
        exit(0);
    } 
    chdir(orgdir);
    return (0);
}


